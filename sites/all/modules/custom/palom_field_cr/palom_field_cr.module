<?php

/**
 * Implements hook_field_schema().
 */
function palom_field_cr_field_schema($field) {
  switch($field['type']){
    case 'field_geo_cr':
      $columns = [
        'country_id' => [
          'type' => 'int',
          'default' => 0,
        ],
        'region_id' => [
          'type' => 'int',
          'default' => 0,
        ]
      ];
      $indexes = [
        'country_id' => ['country_id'],
        'region_id' => ['region_id'],
      ];
      break;
  }
  return [
    'columns' => $columns,
    'indexes' => $indexes,
  ];
}

/**
 * Implements hook_field_info().
 */
function palom_field_cr_field_info() {
  return [
    'field_geo_cr' => [
      'label' => t('Country and region'),
      'description' => t('Country and region of the entity'),
      'default_widget' => 'field_geo_cr_combo_widget',
      'default_formatter' => 'field_geo_cr_default_formatter',
    ]
  ];
}

/**
 * Implements hook_field_widget_info().
 */
function palom_field_cr_field_widget_info() {
  return [
    'field_geo_cr_combo_widget' => [
      'label' => t('Country and region combo widget'),
      'field types' => ['field_geo_cr'],
    ],
  ];
}

/**
 * Implements hook_field_formatter_info().
 */
function palom_field_cr_field_formatter_info() {
  return [
    'field_geo_cr_default_formatter' => [
      'label' => t('Default formatter for the country and region field'),
      'field types' => ['field_geo_cr'],
    ],
  ];
}

/**
 * Implements hook_field_widget_form().
 */
function palom_field_cr_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;

  switch ($instance['widget']['type']) {
    case 'field_geo_cr_combo_widget':
      $element['#attached']['css'][] = drupal_get_path('module', 'palom_field_cr').'/palom_field_cr.css';

      if (isset($form_state['triggering_element']))
        $te = $form_state['triggering_element'];
      else
        $te = null;

      if (isset($te) && $te['#name'] == $field['field_name']."[und][0][country_id]"){
        $country_id = $form_state['values'][$field['field_name']]['und'][0]['country_id'];
        $region_id = 0;
      }
      else if (isset($items[$delta]['country_id'])){
        $country_id = $items[$delta]['country_id'];
        $region_id = $items[$delta]['region_id'];
      }
      else {
        $country_id = palom_utils_get_country_default();
        $region_id = 0;
      }

      $clist = palom_utils_get_countries();
      $countries = [];
      foreach ($clist as $elem){
        $countries[$elem->tid] = $elem->name;
      };

      $wrapper_name = 'field_geo_cr_combo_widget_'.$element['#bundle'].'_'.$field['field_name'].'_'.$delta;

      $element['#prefix'] = '<div id="'.$wrapper_name.'">';
      $element['#suffix'] = '</div>';

      $element['country_id'] = [
        '#type' => 'select',
        '#title' => t('Select a country'),
        '#description' => '',
        '#options' => $countries,
        '#default_value' => $country_id,
        '#ajax' => [
          'callback' => 'palom_field_cr_update_region_list',
          'wrapper' => $wrapper_name,
          'progress' => [
            'type' => 'none',
          ]
        ],
      ] + $base;

      $rlist = palom_utils_get_regions($country_id);

      if ($rlist != []){
        foreach ($rlist as $elem){
          $regions[$elem->tid] = $elem->name;
        };

        $element['region_id'] = [
            '#type' => 'select',
            '#title' => t('Select a region'),
            '#description' => '',
            '#default_value' => $region_id,
            '#empty_option' => t('-select-'),
            '#empty_value' => 0,
            '#options' => $regions,
          ] + $base;
      }
      else {
        $element['region_id'] = [
            '#type' => 'hidden',
            '#value' => 0,
          ] + $base;
      }

      break;
  };

  return $element;
}

function palom_field_cr_update_region_list($form, $form_state){
  if (isset($form_state['triggering_element']['#field_name'])){
    $field_name = $form_state['triggering_element']['#field_name'];
    return $form[$field_name]['und'][0];
  }
}

/**
 * Implements hook_field_is_empty().
 */
function palom_field_cr_field_is_empty($item, $field) {
  return empty($item['country_id']);
}

/**
 * Implements hook_theme().
 */
function palom_field_cr_theme($existing, $type, $theme, $path) {
  return [
    'field_geo_cr_default_formatter' => [
      'render element' => 'element',
      'template' => 'field-geo-cr-default-formatter',
      'type' => 'theme',
    ]
  ];
}

/**
 * Implements hook_field_formatter_view().
 */
function palom_field_cr_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = [];
  $settings = $display['settings'];
  switch ($display['type']){
    case 'field_geo_cr_default_formatter':
      foreach($items as $delta => $item){
        $el = [];
        if ($item['country_id'] != 0){
          $country = taxonomy_term_load($item['country_id']);
          $el['country_name'] = $country->name;
          $el['country_url'] = url('taxonomy/term/'.$country->tid);
        }

        $el['region_name'] = '';
        $el['region_url'] = '';

        if ($item['region_id'] != 0){
          $region = taxonomy_term_load($item['region_id']);
          $el['region_name'] = $region->name;
          $el['region_url'] = url('taxonomy/term/'.$region->tid);
        }

        $element[$delta] = [
          '#theme' => 'field_geo_cr_default_formatter',
          'country_name' => $el['country_name'],
          'country_url' => $el['country_url'],
          'region_name' => $el['region_name'],
          'region_url' => $el['region_url'],
        ];
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function palom_field_cr_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  $view = $form_state['view'];
  if (($view->name == 'geo') && ($view->current_display == 'page_cities')){
//    kpr($form_id);
//    kpr($form);
//    kpr($form_state);

    $country_id = $form_state['input']['country'];
    $region_id = $form_state['input']['region'];

    $clist = palom_utils_get_countries();
    $countries = [];
    foreach ($clist as $elem){
      $countries[$elem->tid] = $elem->name;
    };

    $wrapper_name = $view->name.'_'.$view->current_display;

    $form['#prefix'] = '<div id="'.$wrapper_name.'">';
    $form['#suffix'] = '</div>';


    $form['country'] = [
      '#type' => 'select',
      '#options' => $countries,
      '#default_value' => $country_id,
      '#empty_option' => t('-All countries-'),
      '#empty_value' => '',
    ];

    $rlist = palom_utils_get_regions($country_id);

    if ($rlist != []){
      foreach ($rlist as $elem){
        $regions[$elem->tid] = $elem->name;
      };

      $form['region'] = [
          '#type' => 'select',
          '#default_value' => $region_id,
          '#empty_option' => t('-All regions-'),
          '#empty_value' => '',
          '#options' => $regions,
        ];
    }
    else {
      $form['#info']['filter-field_geo_region_id']['label'] = '';

      $form['region'] = [
          '#type' => 'hidden',
          '#value' => '',
        ];
    }

    array_unshift($form['#validate'], 'palom_field_cr_views_exposed_form_validate');
    array_unshift($form['#submit'], 'palom_field_cr_views_exposed_form_submit');
  }
}

function palom_field_cr_views_exposed_form_validate(&$form, &$form_state){

}

function palom_field_cr_views_exposed_form_submit(&$form, &$form_state){
//  $form_state['rebuild'] = true;
}

function palom_field_cr_update_views_region_list($form, $form_state){
  return $form['region'];
}
