<?php

/**
 * Implements hook_menu().
 */
function palom_publication_menu() {
  $items = [];

  $items['my-companies/pub'] = [
    'title' => 'Настройка публикации',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['palom_publication_form', 'companies'],
    'access callback' => 'palom_publication_access',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu'
  ];

  $items['my-tours/pub'] = [
    'title' => 'Настройка публикации',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['palom_publication_form', 'tours'],
    'access callback' => 'palom_publication_access',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu'
  ];

  return $items;
}

/**
 * Implements hook_node_presave().
 */
function palom_publication_node_presave($node) {
  global $user;
  if (($user->uid != 1) && !isset($node->nid)){
    $max_values = palom_users_get_max_values($user->uid);
    if (in_array($node->type, ['pilgrim_service', 'accommodation', 'feeding', 'transport'])){
      $max_published = $max_values['max_companies'];
      if ($max_published <= palom_users_get_published_count($user->uid, 'companies')){
        $node->status = 0;
        $msg_text = 'Данная организация будет добавлена на сайт, но отображаться не будет, так как вы превысили максимальное количество публикуемых организаций. <br /> '.
                    'Вы можете '. l('снять с публикации', 'my-companies/pub') .' ранее добавленные организации или '.l('увеличить количество', 'premium').' публикуемых организаций';
        drupal_set_message($msg_text);
      }
    }
    else if (in_array($node->type, ['tour'])){
      $max_published = $max_values['max_tours'];
      if ($max_published <= palom_users_get_published_count($user->uid, 'tours')){
        $node->status = 0;
        $msg_text = 'Данный маршрут будет добавлен на сайт, но отображаться не будет, так как вы превысили максимальное количество публикуемых маршрутов. <br /> '.
          'Вы можете '. l('снять с публикации', 'my-tours/pub') .' ранее добавленные маршруты или '.l('увеличить количество', 'premium').' публикуемых маршрутов';
        drupal_set_message($msg_text);
      }
    }
  }
}

function palom_publication_access(){
  global $user;
  return in_array('owner', $user->roles);
}

function palom_publication_form($form, &$form_state){
  global $user;
  $account = user_load($user->uid);

  $args = func_get_args();
  $arr = array_slice($args, -1,1, true);
  $type_form = array_pop($arr);

  unset($form_state['input']['nodes']);

  $form = [];
  $form['#prefix'] = '<div id="node-pub-form">';
  $form['#suffix'] = '</div>';

  $max_values = palom_users_get_max_values($user->uid);
  $max_published = $max_values['max_'.$type_form];

  if (isset($form_state['input']['_triggering_element_name'])){
    $node_name = $form_state['input']['_triggering_element_name'];
    preg_match("/nodes\[([0-9]+)\]/U", $node_name, $out);

    // User may not publish new nodes
    if (($form_state['values']['nodes'][$out[1]] != 0) && ($max_published <= palom_users_get_published_count($user->uid, $type_form))){
        $form['publish_warning'] = [
          '#markup' => 'Вы не можете одновременно опубликовать записей более, чем '.$max_published.'. '.l('Нужно больше?', 'premuim'),
          '#prefix' => '<div id="pub-warning">',
          '#suffix' => '</div>',
        ];
    }
    else {
      $selected_node = node_load($out[1]);
      if ($form_state['values']['nodes'][$selected_node->nid] == 0){
        $selected_node->status = 0;
      }
      else {
        $selected_node->status = 1;
      }
      node_save($selected_node);
    }
  }

  $published = palom_users_get_published_count($user->uid, $type_form);

  $form['max_values'] = [
    '#markup' => 'Опубликовано '.$published.' из '.$max_published,
  ];

  $header = [
    'title' => [
      'data' => t('Title'),
      'field' => 'n.title',
    ],
    'type' => [
      'data' => t('Type'),
      'field' => 'n.type',
    ],
  ];

  switch ($type_form) {
    case 'companies':
      $q = db_select('node', 'n');
      $q->fields('n', ['nid']);
      $q->condition('type', ['pilgrim_service', 'accommodation', 'feeding', 'transport'], 'IN');
      $q->innerJoin('field_data_field_owners', 'field_owners', 'n.nid = field_owners.entity_id');
      $q->condition('field_owners.field_owners_target_id', $user->uid);
      break;
    case 'tours':
      $q = db_select('node', 'n');
      $q->fields('n', ['nid']);
      $q->condition('type', 'tour');
      $q->innerJoin('field_data_field_services', 'field_services', 'n.nid = field_services.entity_id');
      $q->innerJoin('field_data_field_owners', 'field_owners', 'field_services.field_services_target_id = field_owners.entity_id');
      $q->condition('field_owners.field_owners_target_id', $user->uid);
      break;
  }
  $nids = $q->execute()->fetchCol();
  $nodes = node_load_multiple($nids);

  $default_value = [];

  $options = [];

  foreach($nodes as $node){
    if ($node->status == 1){
      $default_value[$node->nid] = TRUE;
    }
    else {
      $default_value[$node->nid] = FALSE;
    }
    $options[$node->nid] = [
      'title' => [
        'data' => [
          '#type' => 'link',
          '#title' => $node->title,
          '#href' => 'node/'.$node->nid,
        ],
      ],
      'type' => check_plain(node_type_get_name($node)),
    ];
  };

  $form['nodes'] = [
    '#type' => 'tableselect',
    '#header' => $header,
    '#options' => $options,
    '#empty' => t('No content available'),
    '#js_select' => FALSE,
    '#default_value' => $default_value,
    '#ajax' => [
      'callback' => 'palom_publication_form_ajax_callback',
      'wrapper' => 'node-pub-form',
      'method' => 'replace',
      'progress' => [
        'type' => 'none',
      ]
    ],
  ];

//  $form_state['rebuild'] = true;

  return $form;
}

function palom_publication_form_submit($form, &$form_state){
  //$form_state['rebuild'] = true;
}

function palom_publication_form_ajax_callback($form, $form_state){
  return $form;
}

function palom_publication_form_views_exposed_form_alter(&$form, &$form_state, $form_id){
  global $user;
  $view = $form_state['view'];
  if (($view->name == 'user_data') && ($view->current_display == 'page_my_tours')){
    $service_id = ($form_state['input']['service']) ?? '';
    $services = [];

    $slist = palom_utils_get_companies($user->uid, 'pilgrim_service');
    foreach ($slist as $elem){
      $published = '';
      if (!$elem->status){
        $published = ' (не опубликован)';
      }
      $services[$elem->nid] = $elem->title.$published;
    };

    $form['service'] = [
      '#type' => 'select',
      '#options' => $services,
      '#default_value' => $service_id,
      '#empty_option' => t('-All services-'),
      '#empty_value' => '',
    ];

    if ((int)$service_id > 0){
      $selected_service = node_load($service_id);

      if (!$selected_service->status){
        $form['unpublished_msg'] = [
          '#markup' => 'Выбранная паломническая служба '.l('не опубликована', 'my-companies/pub').' и все её маршруты также не будут отображаться',
        ];
      }
    }
  }
}

