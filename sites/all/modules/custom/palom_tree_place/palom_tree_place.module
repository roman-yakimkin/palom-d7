<?php

/**
 * Implements hook_field_widget_info().
 */
function palom_tree_place_field_widget_info() {
  return [
    'palom_tree_place_widget' => [
      'label' => t('A tree widget for selecting places'),
      'field types' => ['entityreference'],
      'behaviors' => [
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ],
    ]
  ];
}

/**
 * Implements hook_field_widget_form().
 */
function palom_tree_place_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

}

/**
 * Implements hook_field_is_empty().
 */
function palom_tree_place_field_is_empty($item, $field) {
  return empty($item['target_id']);
}

/*
 *  Converting data from the tree into the form structure
 */
function _palom_tree_place_element_validate($element, &$form_state){
  $values = $element['places']['values']['#value'];
  $language = $element['#language'];
  $field_name = $element['#field_name'];

  $ret_values = [];

  $stElems = trim($values);
  $elems = explode(" ", $stElems);
  if ($stElems != '') {
    foreach ($elems as $one_elem) {
      $ret_values[] = [
        'target_id' => $one_elem,
      ];
    };
  }

  form_set_value($element, $ret_values, $form_state);
}

/**
 * Implements hook_theme().
 */
function palom_tree_place_theme($existing, $type, $theme, $path) {
  return [
    'palom_tree_place_widget' => [
      'variables' => [
        'field_name' => null,
      ],
      'template' => 'palom-tree-place-widget',
    ],
  ];
}